import os,hashlib,json
from lxml import etree as ET

def get_immediate_subdirectories(a_dir):
    dirlist=list()
    for name in os.listdir(a_dir):
        if name[0]!="." and name[0]!="@":
            if os.path.isdir(os.path.join(a_dir, name)):
                dirlist.append(os.path.join(a_dir, name))
    return dirlist

def md5(fname):
    hash_md5 = hashlib.md5()
    try:
        with open(fname, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()
    except:
        return "not found"
def licid(lic):
    lid=lic
    return lid

def groupdetails(path):
    files= os.listdir(path)
    copyr = ""
    groupname,lid,ver=path,"",""
    for file in files:
        if file[0:6]=="NOTICE":
            try:
                f=open(os.path.join(path,file), 'r',encoding="utf-8",errors='ignore')
                lines = f.readlines()
                for line in lines:
                    if "Copyright" in line and line!=copyr:
                        copyr=copyr+line
            except:
                print("not able to open the file")
        if file[0:7]=="LICENSE" or file[0:7]=="license" :
            try:
                f=open(os.path.join(path,file), 'r',encoding="utf-8",errors='ignore')
                lines = f.readlines()
                for line in lines:
                    if "Copyright" in line and line!=copyr:
                        copyr=copyr+line
            except:
                print("not able to open the file")
        if file[0:6]=="README" or file[0:6]=="readme" :
            try:
                f=open(os.path.join(path,file), 'r',encoding="utf-8",errors='ignore')
                lines = f.readlines()
                for line in lines:
                    if "Copyright" in line and line!=copyr and "Copyright" not in copyr:
                        copyr=copyr+line
            except:
                print("not able to open the file")
        
        if file=="package.json":
            try:
                input_file=open(os.path.join(path,file), 'r',encoding="utf-8",errors='ignore')
                json_decode=json.load(input_file)
                print("Checking url in bugs")
                url = json_decode.get('bugs')
                print(url)
                if url!=None:
                    if type(url) is dict:
                        url=json_decode.get('bugs').get('url')
                        if url[:19]=="https://github.com/":
                            groupname=url[19:]
                        elif url[:18]=="http://github.com/":
                            groupname=url[18:]
                        else:
                            print("group name not found")
                            url=None
                    elif url[:18]=="http://github.com/":
                        groupname=url[18:]
                    elif url[:19]=="https://github.com/":
                        groupname=url[19:]
                    else:
                        print("group name not found")
                        url=None
                    groupname=groupname.replace('/issues/','')
                    groupname=groupname.replace('/issues','')
                    groupname=groupname.replace('.git','')
                if url==None:
                    print("checking Repository")
                    url2=json_decode.get('repository')
                    print(url2)
                    if url2!=None:
                        if type(url2) is dict:
                            print("Repository is dictionary")
                            repourl=json_decode.get('repository').get("url")
                            print(repourl)
                            if repourl!=None:
                                if repourl[:19]=="https://github.com/":
                                    groupname=repourl[19:]
                                elif repourl[:18]=="http://github.com/":
                                    groupname=repourl[18:]
                                elif repourl[:22]=="http://www.github.com/":
                                    groupname=repourl[22:]
                                elif repourl[:17]=="git://github.com/":
                                    groupname=repourl[17:]
                                elif repourl[:15]=="git@github.com:":
                                    groupname=repourl[15:]
                                elif repourl[:23]=="git+https://github.com/":
                                    groupname=repourl[23:]
                                elif repourl[:25]=="git+ssh://git@github.com/":
                                    groupname=repourl[25:]
                                elif repourl[:11]=="github.com:":
                                    groupname=repourl[11:]
                            else:
                                url2=None
                        elif url2[:18]=="http://github.com/":
                            groupname=url2[18:]
                        elif url2[:19]=="https://github.com/":
                            groupname=url2[19:]
                        elif url2[:17]=="git://github.com/":
                            groupname=url2[17:]
                        else:
                            groupname=url2
                        groupname=groupname.replace(".git","")
                    if url2==None:
                        print("checking homepage")
                        url1=json_decode.get('homepage')
                        print(url1)
                        if url1!=None:
                            if url1[:18]=="http://github.com/":
                                url2=url1.replace('#readme','')
                                groupname=url2[18:]
                            elif url1[:18]=="https://github.com":
                                url2=url1.replace('#readme','')
                                groupname=url2[19:]
                print(groupname)
                print("Checking license")
                lic=json_decode.get('license')
                print (lic)
                if lic != None:
                    if type(lic) is dict:
                        print('license is dictionary')
                        lic=lic.get('type')
                        print(lic)
                if type(lic) is list:
                    print('license is list')
                    lic=lic[1]
                    print(lic)
                if lic == None:
                    print("Checking licenses")
                    lic = json_decode.get('licenses')
                    print(lic)
                    if type(lic) is dict:
                        print('licenses is dictionary')
                        lic=lic.get('type')
                    if type(lic) is list:
                        print('licenses is list')
                        lic=lic[0]
                        if type(lic) is dict:
                            lic=lic.get('type')
                            print(lic)
                lid=licid(lic)
                print(lid)
                ver=json_decode.get('version')
                print(ver)
                print (copyr)
            except:
                print("not able to open the file package.json")
        else:
            continue
    if groupname==None:
        groupname=path
    if lid==None:
        lid=""
    if ver==None:
        ver=""
    if groupname[:13]!="node_modules\\":
        groupnames=groupname.split('/',3)
        groupname=groupnames[0]+"/"+groupnames[1]
    return groupname,lid,ver,copyr

def list_allfile(path,fileslist):
    files= os.listdir(path)
    inside_node_dirs=list()
    for file in files:
        lowpath= os.path.join(path,file)
        if lowpath == os.path.join(path,'node_modules'):
            print(lowpath)
            print("skipping inside nodemodules")
            inside_node_dirs=get_immediate_subdirectories(lowpath)
            continue
        else:
            if os.path.isdir(lowpath):
                list_allfile(lowpath,fileslist)
            else:
                fileslist.append(os.path.join(path,file))
    return fileslist,inside_node_dirs

def customdata(comp_name,lid,ver):
    compname=comp_name.replace("/","-")
    compname=compname.lower()
    if compname[:12]=="node_modules":
        compnames=compname.split('\\')
        compname=compnames[-1]
        url="https://www.npmjs.com/package/"+compname
    else:
        url="https://github.com/"+comp_name
    component=ET.Element("component",name=compname,id="")
    ET.SubElement(component,"title").text=compname
    ET.SubElement(component,"url").text=url
    ET.SubElement(component,"description").text=compname
    ET.SubElement(component,"enryption").text="false"
    licenses=ET.SubElement(component,"licenses")
    ET.SubElement(licenses,"license",id=lid,name="")
    versions=ET.SubElement(component,"versions")
    ET.SubElement(versions,"version",id="",name=ver)
    return component

def group_def (groups,group_name,lid,ver,copyr):
    groupname=group_name.replace("/","-")
    if groupname[:12]=="node_modules":
        groupnames=groupname.split('\\')
        groupname=groupnames[-1]
        url="https://www.npmjs.com/package/"+groupname
    else:
        url="https://github.com/"+group_name
    group=ET.Element("group",name=groupname+" "+ver)
    ET.SubElement(group,"title",).text=url
    ET.SubElement(group,"component").text=groupname
    ET.SubElement(group,"componentVersion").text=ver
    ET.SubElement(group,"selectedLicense").text=lid
    ET.SubElement(group,"distributionLicenseText").text=copyr
    return group



def list_all(path):
    group_name,lid,ver,copyr = groupdetails(path)
    groupname=group_name.replace("/","-")
    print(groupname)
    fileslist= list()
    inside_node_dirs=list()
    fileslist,inside_node_dirs=list_allfile(path,fileslist)
    files_tree = ET.Element( "files2")
    ctree=ET.Element( "data2")
    for thefile in fileslist:
        head, tail = os.path.split(thefile)
        file_md5=md5(thefile)
        file_tree=ET.Element("file",fullPath=thefile)
        ET.SubElement(file_tree,"fileName").text=tail
        ET.SubElement(file_tree,"md5").text=file_md5
        group=ET.SubElement(file_tree,"groups")
        ET.SubElement(group,"group").text=groupname+" "+ver
        files_tree.append(file_tree)
    ctree=customdata(group_name,lid,ver)
    group=group_def(path,group_name,lid,ver,copyr)
    return files_tree,group,ctree,inside_node_dirs

def main(getdir):
    palamidaworkspace = ET.Element("Workspace")
    groups=ET.Element("groups")
    files = ET.Element("files")
    customtree=ET.Element("Instance")
    ET.SubElement(customtree,"licenses")
    components=ET.SubElement(customtree,"components")
    dirs=get_immediate_subdirectories(getdir)
    for path in dirs:
        print('\n','\n',path)
        file_tree,group,ctree,inside_node_dirs=list_all(path)
        files.append(file_tree)
        components.append(ctree)
        groups.append(group)
        dirs.extend(inside_node_dirs)
    palamidaworkspace.append(groups)
    palamidaworkspace.append(files)
    tree = ET.ElementTree(palamidaworkspace)
    customdata_tree = ET.ElementTree (customtree)
    tree.write("nodemodules.xml",encoding="utf-8",xml_declaration=True, pretty_print=True)
    customdata_tree.write("customData.xml",encoding='utf-8', xml_declaration=True,pretty_print=True)
    with open('nodemodules.xml','r',encoding="utf-8") as f:
        newlines = []
        for line in f.readlines():
            newline1=line.replace('</files2>', '')
            newline2=newline1.replace('<files2>', '')
            newline3=newline2.replace("\\","/" )
            newlines.append(newline3)
        with open('nodemodules.xml', 'w',encoding="utf-8") as f:
            for line in newlines:
                f.write(line)
                          
main("node_modules")

